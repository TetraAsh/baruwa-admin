#!/bin/sh
# +--------------------------------------------------------------------+
# Baruwa Admin Commands
# +--------------------------------------------------------------------+
#
# Adaptions and Further Funcationality  - Ashley Unwin
# Original Author - Jeremy McSpadden
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# +--------------------------------------------------------------------+

# +---------------------------------------------------+
# Version Tracking
# +---------------------------------------------------+

date="08-10-2014"						# Last Updated On
version="1.0"							# Script Version
binhome="/home/baruwa/px/bin/"			# Path to bin

# Create Admin Account
function admin_account () {
clear 2>/dev/null
echo "------------------------------------------------------------------------------";
echo "	A D D  B A R U W A  A D M I N  A C C O U N T";
echo "------------------------------------------------------------------------------";
echo "We are now going to add an admin user to Baruwa."
echo ""
echo "What would you like your username to be?"
read -p "Username: " ADMINUSER
echo ""
echo "What password would you like to use?"
echo "This must be a complex password!"
read -p "Password: " ADMINPASS
echo ""
echo "What email would you like to use?"
read -p "Email: " ADMINEMAIL
echo ""
$binhome/paster create-admin-user -u ${ADMINUSER} -p ${ADMINPASS} -e ${ADMINEMAIL} -t UTC /etc/baruwa/production.ini

cat >> /tmp/message << EOF
New Admin User Added
----------------------------------
We have successfully added a new admin account.

Username: ${ADMINUSER}
Password: ${ADMINPASS}
Email: ${ADMINEMAIL}

----------------------------------
EOF

/bin/mail -s "[Baruwa Admin] - New Admin for ${HOSTNAME}" < /tmp/message root
rm -f /tmp/message
sleep 5
}

# Change User Password
function reset_password () {
clear 2>/dev/null
echo "------------------------------------------------------------------------------";
echo "	C H A N G E  U S E R  P A S S W O R D";
echo "------------------------------------------------------------------------------";
echo "We are now going to change a users password."
echo ""
echo "What user would you like to change the password for?"
read -p "Username: " USERNAME
echo ""
$binhome/paster change-user-password --username ${USERNAME} /etc/baruwa/production.ini
sleep 8
}

# Clean Quarantine
function prune_quarantine () {
clear 2>/dev/null
echo "------------------------------------------------------------------------------";
echo "	P R U N E  Q U A R A N T I N E";
echo "------------------------------------------------------------------------------";
echo "We are now going to prune your Quarantine."
echo "Processing ....."
$binhome/paster prune-quarantine /etc/baruwa/production.ini
sleep 5
}

# Send Reports
function send_reports () {
clear 2>/dev/null
echo "------------------------------------------------------------------------------";
echo "	S E N D  R E P O R T S";
echo "------------------------------------------------------------------------------";
echo "We are now going to prune your Quarantine."
echo "Processing ....."
$binhome/paster send-quarantine-reports /etc/baruwa/production.ini
sleep 5
}

# Send PDF Reports
function send_pdf_reports () {
clear 2>/dev/null
echo "------------------------------------------------------------------------------";
echo "	S E N D  P D F  R E P O R T S";
echo "------------------------------------------------------------------------------";
echo "We are now going to send PDF Reports."
echo "Processing ....."
$binhome/paster send-pdf-reports /etc/baruwa/production.ini
sleep 5
}

# Update SA Rules
function update_sa_rules () {
clear 2>/dev/null
echo "------------------------------------------------------------------------------";
echo "	U P D A T E  S A  R U L E S";
echo "------------------------------------------------------------------------------";
echo "We are now going to update your spamasasssin rules."
echo "Processing ....."
$binhome/paster update-sa-rules /etc/baruwa/production.ini
sleep 5
}

# Update Search Index
function update_search_index () {
clear 2>/dev/null
echo "------------------------------------------------------------------------------";
echo "	I N D E X  S E A R C H";
echo "------------------------------------------------------------------------------";
echo "We are now going to update your search index."
echo "Processing ....."
$binhome/paster update-delta-index --index messages --realtime /etc/baruwa/production.ini
sleep 5
$binhome/paster update-delta-index --index archive /etc/baruwa/production.ini
sleep 5
}





# update QueueStats
function update_queuestats () {
clear 2>/dev/null
echo "------------------------------------------------------------------------------";
echo "Update Queue Stats";
echo "------------------------------------------------------------------------------";
echo "Updating Queue Stats.."
echo ""; sleep 1
/home/baruwa/px/bin/paster update-queue-stats
echo "Updated!!!"
sleep 5
}





# Run mail In
function runmailin () {
clear 2>/dev/null
echo "------------------------------------------------------------------------------";
echo "Run Incomming Mail Queue";
echo "------------------------------------------------------------------------------";
echo "Running Mail Queue.."
echo ""; sleep 1
exim -C /etc/exim/exim.conf -v -qff
echo "Completed!!!"
sleep 2
}


# Run mail out
function runmailout () {
clear 2>/dev/null
echo "------------------------------------------------------------------------------";
echo "Run Outgoing Mail Queue";
echo "------------------------------------------------------------------------------";
echo "Running Mail Queue.."
echo ""; sleep 1
exim -C /etc/exim/exim_out.conf -v -qff
echo "Completed!!!"
sleep 2
}











# +---------------------------------------------------+
# Display menus
# +---------------------------------------------------+

menu_main() {
	clear
	echo "------------------------------"
	echo "Baruwa Admin"
	echo "------------------------------"
	echo ""
	echo "Please make a choice:"
	echo ""
	echo "a) Create Admin Account"
	echo "b) Reset User Password"
	echo "d) Send Quarantine Reports"
	echo "e) Send PDF Reports"
	#echo "f) Send Top Spammer List"
	#echo "g) Send Whitelist Data"
	echo "f) Update SpamAssassin Rules"
	echo "g) Update Search Index"
	echo ""
	echo "p) Veiw Logs/Drive Space"
	echo "q) Restart Services"
	echo ""
	echo "v) Update Antivirus rules"
	echo "w) Run Incomming Mail Queue"
	echo "y) Run Outgoing Mail Queue"
	echo "z) Update Queue Stats"

	echo " "
	echo "Type 'x' to quit"
}

# +---------------------------------------------------+
# Choices
# +---------------------------------------------------+

read_main() {
	local choice
	read -p "Enter Choice: " choice
	case $choice in
		a) admin_account ;;
		b) reset_password ;;
		c) prune_quarantine ;;
		d) send_reports ;;
		e) send_pdf_reports ;;
		f) update_sa_rules ;;
		g) update_search_index ;;

		p) baruwa-logs ;;
		q) baruwa-services ;;
		
		v) freshclam ;;
		w) runmailin ;;
		y) runmailout ;;
		z) update_queuestats ;;

		x) exit 0 ;;
		*) echo -e "Error \"$choice\" is not an option..." && sleep 2
	esac
}

# +---------------------------------------------------+
# Be sure we're root
# +---------------------------------------------------+

if [ `whoami` == root ]
	then
		menu="1"
		while [ $menu == "1" ]
		do
			menu_main
			read_main
		done
	else
		echo "Sorry, but you are not root."
		echo "Please su - then try again."
		exit 0
	fi
# +---------------------------------------------------+
